import heapq
import sys
input=sys.stdin.readline
INF=int(1e9)

#입력받기
n,m=map(int,input().split())
start=int(input())
graph=[[] for i in range(n+1)]
distance=[INF]*(n+1)

#그래프에 입력
for _ in range(m):
    a,b,c=map(int,input().split())
    graph[a].append((b,c))

#다익스트라
def dijkstra(start):
    #큐 생성
    q=[]
    heapq.heappush(q,(0,start))
    distance[start]=0
    while q:
        #최단거리의 거리와 위치 추출
        dist, now = heapq.heappop(q)
        #만약 방문한 곳이면 무시
        if distance[now]<dist:
            continue
        #연결된 노드 확인    
        for i in graph[now]:
            #현재 거리 + 간선의 값
            cost=dist+i[1]
            #만약 cost가 연결된 노드의 기존의 최단거리보다 작다면 최단거리 업데이트하고 큐에 삽입
            if cost<distance[i[0]]:
                distance[i[0]]=cost
                heapq.heappush(q,(cost,i[0]))
            
    
